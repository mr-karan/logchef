import{as as o,at as U,R as d,g as m}from"./index-DhD1Jy6j.js";import{u as A,h as n}from"./base-AlOswPYA.js";import{u as B}from"./teams-B0mpmRSw.js";const l={async listSources(){return(await o.get("/sources")).data},async listUserSources(){return(await o.get("/user/sources")).data},async getSource(a){return(await o.get(`/sources/${a}`)).data},async createSource(a){return(await o.post("/sources",a)).data},async deleteSource(a){return(await o.delete(`/sources/${a}`)).data},async getSourceStats(a){return(await o.get(`/sources/${a}/stats`)).data},async listSourceQueries(a,t=!0){return(await o.get(`/sources/${a}/queries?groupByTeam=${t}`)).data},async createSourceQuery(a,t){return(await o.post(`/sources/${a}/queries`,t)).data}},R=U("sources",()=>{const{data:a,isLoading:t,error:p,withLoading:f}=A([]),u=d([]),c=d({}),i=d({}),g=B(),w=m(()=>u.value),h=m(()=>g.currentTeamId?u.value.filter(e=>e.teams.some(s=>s.id===g.currentTeamId)):[]);async function C(){return f(async()=>{const{success:e,data:s}=await n({apiCall:()=>l.listSources(),successMessage:void 0});e&&s&&(a.value=s||[])})}async function M(){return f(async()=>{const{success:e,data:s}=await n({apiCall:()=>l.listUserSources(),successMessage:void 0});e&&s&&(u.value=s.map(r=>({...r.source,teams:r.teams}))||[])})}async function Q(e,s=!1){if(!i.value[e]){if(c.value[e]&&!s)return c.value[e];i.value={...i.value,[e]:!0};try{const{success:r,data:y}=await n({apiCall:()=>l.listSourceQueries(Number(e),!0),successMessage:void 0});return r&&y?(c.value={...c.value,[e]:y},y):[]}catch(r){return console.error("Error loading source queries:",r),[]}finally{i.value={...i.value,[e]:!1}}}}async function T(e,s){return await f(async()=>await n({apiCall:()=>l.createSourceQuery(Number(e),s),onSuccess:()=>{}}))}async function $(e){const{success:s}=await n({apiCall:()=>l.createSource(e),successMessage:"Source created successfully",onSuccess:r=>{a.value&&r&&a.value.push(r)}});return s}async function L(e){const{success:s}=await n({apiCall:()=>l.deleteSource(e),successMessage:"Source deleted successfully",onSuccess:()=>{if(a.value&&(a.value=a.value.filter(r=>r.id!==e)),u.value&&(u.value=u.value.filter(r=>r.id!==e)),c.value[e]){const r={...c.value};delete r[e],c.value=r}}});return s}function N(e){return a.value?a.value.filter(s=>!e.includes(s.id)&&!e.includes(Number(s.id))&&!e.includes(String(s.id))):[]}function b(e){const s=u.value.find(r=>r.id===e);return s?s.teams:[]}const S=d(!1),v=d(null);async function q(e){S.value=!0,v.value=null;try{const{success:s,data:r}=await n({apiCall:()=>l.getSourceStats(e),successMessage:void 0});return S.value=!1,s?r:null}catch(s){return S.value=!1,v.value=s.message||"Failed to fetch source statistics",null}}return{sources:a,isLoading:t,error:p,sourcesWithTeams:u,sourceQueriesMap:c,sourceQueriesLoading:i,sourceStatsLoading:S,sourceStatsError:v,deduplicatedSources:w,teamSources:h,loadSources:C,loadUserSources:M,loadSourceQueries:Q,createSource:$,deleteSource:L,createSourceQuery:T,getSourceStats:q,getSourcesNotInTeam:N,getTeamsForSource:b}});export{R as u};
