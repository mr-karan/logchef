// Define constants for token types
export const CharType = Object.freeze({
  KEYWORD: "keyword",
  FUNCTION: "function",
  TYPE: "type",
  OPERATOR: "operator",
  STRING: "string",
  NUMBER: "number",
  DELIMITER: "delimiter",
  COMMENT: "comment",
  IDENTIFIER: "identifier",
  PUNCTUATION: "punctuation",
  VARIABLE: "variable",
  SPACE: "space",
});

// Token types for Monaco editor
export const tokenTypes = [
  CharType.KEYWORD,
  CharType.FUNCTION,
  CharType.TYPE,
  CharType.OPERATOR,
  CharType.STRING,
  CharType.NUMBER,
  CharType.DELIMITER,
  CharType.COMMENT,
  CharType.IDENTIFIER,
  CharType.PUNCTUATION,
  CharType.VARIABLE,
];

// Common SQL keywords for ClickHouse
export const SQL_KEYWORDS = [
  "SELECT",
  "FROM",
  "WHERE",
  "JOIN",
  "LEFT",
  "RIGHT",
  "INNER",
  "OUTER",
  "ON",
  "GROUP",
  "BY",
  "HAVING",
  "ORDER",
  "ASC",
  "DESC",
  "LIMIT",
  "OFFSET",
  "UNION",
  "ALL",
  "AND",
  "OR",
  "NOT",
  "CASE",
  "WHEN",
  "THEN",
  "ELSE",
  "END",
  "IS",
  "NULL",
  "AS",
  "DISTINCT",
  "BETWEEN",
  "IN",
  "INTERVAL",
  "WITH",
  "PREWHERE",
  "TOP",
  "SAMPLE",
  "USING",
];

// Common ClickHouse data types
export const SQL_TYPES = [
  "Int8",
  "Int16",
  "Int32",
  "Int64",
  "Int128",
  "Int256",
  "UInt8",
  "UInt16",
  "UInt32",
  "UInt64",
  "UInt128",
  "UInt256",
  "Float32",
  "Float64",
  "Decimal",
  "String",
  "FixedString",
  "UUID",
  "Date",
  "DateTime",
  "DateTime64",
  "IPv4",
  "IPv6",
  "Array",
  "Tuple",
  "Map",
  "Enum",
];

// Common ClickHouse functions for log analytics
export const CLICKHOUSE_FUNCTIONS = [
  // Aggregate functions
  "count",
  "sum",
  "avg",
  "min",
  "max",
  "any",
  "anyHeavy",
  "quantile",
  "median",
  "stddev",
  "variance",
  "covariance",
  "correlation",
  "uniq",
  "uniqExact",
  "uniqCombined",
  "groupArray",
  "groupArrayInsertAt",
  "groupUniqArray",
  "topK",
  "histogram",
  "countIf",
  "sumIf",
  "avgIf",
  "minIf",
  "maxIf",

  // Date/time functions
  "now",
  "today",
  "yesterday",
  "toStartOfHour",
  "toStartOfDay",
  "toStartOfWeek",
  "toStartOfMonth",
  "toStartOfQuarter",
  "toStartOfYear",
  "toDateTime",
  "toDateTime64",
  "toDate",
  "formatDateTime",
  "dateDiff",
  "toUnixTimestamp",
  "fromUnixTimestamp",
  "toYear",
  "toMonth",
  "toDayOfMonth",
  "toHour",
  "toMinute",
  "toSecond",
  "toWeek",
  "toISOWeek",
  "toISOYear",
  "toRelativeHourNum",
  "toRelativeDayNum",
  "toRelativeWeekNum",
  "toRelativeMonthNum",

  // String functions
  "position",
  "positionCaseInsensitive",
  "substring",
  "substringUTF8",
  "replaceOne",
  "replaceAll",
  "replaceRegexpOne",
  "replaceRegexpAll",
  "lower",
  "upper",
  "lowerUTF8",
  "upperUTF8",
  "reverse",
  "reverseUTF8",
  "match",
  "extract",
  "extractAll",
  "extractAllGroupsHorizontal",
  "toLowerCase",
  "toUpperCase",
  "trim",
  "trimLeft",
  "trimRight",
  "trimBoth",
  "concat",
  "empty",
  "notEmpty",
  "length",
  "lengthUTF8",

  // JSON functions
  "JSONHas",
  "JSONLength",
  "JSONType",
  "JSONExtractString",
  "JSONExtractInt",
  "JSONExtractUInt",
  "JSONExtractFloat",
  "JSONExtractBool",
  "JSONExtractRaw",
  "JSONExtractArrayRaw",
  "JSONExtract",
  "simpleJSONExtract",
  "visitParamHas",
  "visitParamExtractString",

  // Array functions
  "arrayJoin",
  "splitByChar",
  "splitByString",
  "arrayConcat",
  "arrayElement",
  "has",
  "indexOf",
  "countEqual",
  "arrayFilter",
  "arrayMap",
  "arrayFlatten",
  "arrayCompact",
  "arrayReverse",
  "arraySlice",
  "arrayDistinct",
  "arrayEnumerate",
  "arrayUniq",

  // Window functions
  "row_number",
  "rank",
  "dense_rank",
  "lag",
  "lead",

  // Conditional functions
  "if",
  "multiIf",
  "ifNull",
  "nullIf",
  "coalesce",
  "isNull",
  "isNotNull",
  "assumeNotNull",
  "greatest",
  "least",

  // Type conversion
  "toInt8",
  "toInt16",
  "toInt32",
  "toInt64",
  "toInt128",
  "toInt256",
  "toUInt8",
  "toUInt16",
  "toUInt32",
  "toUInt64",
  "toUInt128",
  "toUInt256",
  "toFloat32",
  "toFloat64",
  "toDecimal32",
  "toDecimal64",
  "toDecimal128",
  "toString",
  "toFixedString",
  "toDate32",
  "toUUID",

  // Formatting and display
  "formatReadableSize",
  "formatReadableTimeDelta",
  "formatRow",
  "formatBytes",
  "bitmaskToList",
  "formatDateTime",
];

// Operators
export const OPERATORS = [
  "+",
  "-",
  "*",
  "/",
  "%",
  "=",
  "<>",
  "!=",
  ">",
  "<",
  ">=",
  "<=",
  "LIKE",
  "NOT LIKE",
  "ILIKE",
];

// Helper for checking numeric strings
export function isNumeric(value: string): boolean {
  return !isNaN(parseFloat(value)) && isFinite(Number(value));
}
