// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addTeamMemberStmt, err = db.PrepareContext(ctx, addTeamMember); err != nil {
		return nil, fmt.Errorf("error preparing query AddTeamMember: %w", err)
	}
	if q.addTeamSourceStmt, err = db.PrepareContext(ctx, addTeamSource); err != nil {
		return nil, fmt.Errorf("error preparing query AddTeamSource: %w", err)
	}
	if q.countAdminUsersStmt, err = db.PrepareContext(ctx, countAdminUsers); err != nil {
		return nil, fmt.Errorf("error preparing query CountAdminUsers: %w", err)
	}
	if q.countUserSessionsStmt, err = db.PrepareContext(ctx, countUserSessions); err != nil {
		return nil, fmt.Errorf("error preparing query CountUserSessions: %w", err)
	}
	if q.createSessionStmt, err = db.PrepareContext(ctx, createSession); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSession: %w", err)
	}
	if q.createSourceStmt, err = db.PrepareContext(ctx, createSource); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSource: %w", err)
	}
	if q.createTeamStmt, err = db.PrepareContext(ctx, createTeam); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTeam: %w", err)
	}
	if q.createTeamSourceQueryStmt, err = db.PrepareContext(ctx, createTeamSourceQuery); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTeamSourceQuery: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteSessionStmt, err = db.PrepareContext(ctx, deleteSession); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSession: %w", err)
	}
	if q.deleteSourceStmt, err = db.PrepareContext(ctx, deleteSource); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSource: %w", err)
	}
	if q.deleteTeamStmt, err = db.PrepareContext(ctx, deleteTeam); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTeam: %w", err)
	}
	if q.deleteTeamSourceQueryStmt, err = db.PrepareContext(ctx, deleteTeamSourceQuery); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTeamSourceQuery: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteUserSessionsStmt, err = db.PrepareContext(ctx, deleteUserSessions); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserSessions: %w", err)
	}
	if q.getSessionStmt, err = db.PrepareContext(ctx, getSession); err != nil {
		return nil, fmt.Errorf("error preparing query GetSession: %w", err)
	}
	if q.getSourceStmt, err = db.PrepareContext(ctx, getSource); err != nil {
		return nil, fmt.Errorf("error preparing query GetSource: %w", err)
	}
	if q.getSourceByNameStmt, err = db.PrepareContext(ctx, getSourceByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetSourceByName: %w", err)
	}
	if q.getTeamStmt, err = db.PrepareContext(ctx, getTeam); err != nil {
		return nil, fmt.Errorf("error preparing query GetTeam: %w", err)
	}
	if q.getTeamByNameStmt, err = db.PrepareContext(ctx, getTeamByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetTeamByName: %w", err)
	}
	if q.getTeamMemberStmt, err = db.PrepareContext(ctx, getTeamMember); err != nil {
		return nil, fmt.Errorf("error preparing query GetTeamMember: %w", err)
	}
	if q.getTeamSourceQueryStmt, err = db.PrepareContext(ctx, getTeamSourceQuery); err != nil {
		return nil, fmt.Errorf("error preparing query GetTeamSourceQuery: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.listQueriesByTeamAndSourceStmt, err = db.PrepareContext(ctx, listQueriesByTeamAndSource); err != nil {
		return nil, fmt.Errorf("error preparing query ListQueriesByTeamAndSource: %w", err)
	}
	if q.listSourceTeamsStmt, err = db.PrepareContext(ctx, listSourceTeams); err != nil {
		return nil, fmt.Errorf("error preparing query ListSourceTeams: %w", err)
	}
	if q.listSourcesStmt, err = db.PrepareContext(ctx, listSources); err != nil {
		return nil, fmt.Errorf("error preparing query ListSources: %w", err)
	}
	if q.listSourcesForUserStmt, err = db.PrepareContext(ctx, listSourcesForUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListSourcesForUser: %w", err)
	}
	if q.listTeamMembersStmt, err = db.PrepareContext(ctx, listTeamMembers); err != nil {
		return nil, fmt.Errorf("error preparing query ListTeamMembers: %w", err)
	}
	if q.listTeamMembersWithDetailsStmt, err = db.PrepareContext(ctx, listTeamMembersWithDetails); err != nil {
		return nil, fmt.Errorf("error preparing query ListTeamMembersWithDetails: %w", err)
	}
	if q.listTeamSourcesStmt, err = db.PrepareContext(ctx, listTeamSources); err != nil {
		return nil, fmt.Errorf("error preparing query ListTeamSources: %w", err)
	}
	if q.listTeamsStmt, err = db.PrepareContext(ctx, listTeams); err != nil {
		return nil, fmt.Errorf("error preparing query ListTeams: %w", err)
	}
	if q.listTeamsForUserStmt, err = db.PrepareContext(ctx, listTeamsForUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListTeamsForUser: %w", err)
	}
	if q.listUserTeamsStmt, err = db.PrepareContext(ctx, listUserTeams); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserTeams: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.removeTeamMemberStmt, err = db.PrepareContext(ctx, removeTeamMember); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveTeamMember: %w", err)
	}
	if q.removeTeamSourceStmt, err = db.PrepareContext(ctx, removeTeamSource); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveTeamSource: %w", err)
	}
	if q.teamHasSourceStmt, err = db.PrepareContext(ctx, teamHasSource); err != nil {
		return nil, fmt.Errorf("error preparing query TeamHasSource: %w", err)
	}
	if q.updateSourceStmt, err = db.PrepareContext(ctx, updateSource); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSource: %w", err)
	}
	if q.updateTeamStmt, err = db.PrepareContext(ctx, updateTeam); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTeam: %w", err)
	}
	if q.updateTeamMemberRoleStmt, err = db.PrepareContext(ctx, updateTeamMemberRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTeamMemberRole: %w", err)
	}
	if q.updateTeamSourceQueryStmt, err = db.PrepareContext(ctx, updateTeamSourceQuery); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTeamSourceQuery: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.userHasSourceAccessStmt, err = db.PrepareContext(ctx, userHasSourceAccess); err != nil {
		return nil, fmt.Errorf("error preparing query UserHasSourceAccess: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addTeamMemberStmt != nil {
		if cerr := q.addTeamMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addTeamMemberStmt: %w", cerr)
		}
	}
	if q.addTeamSourceStmt != nil {
		if cerr := q.addTeamSourceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addTeamSourceStmt: %w", cerr)
		}
	}
	if q.countAdminUsersStmt != nil {
		if cerr := q.countAdminUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countAdminUsersStmt: %w", cerr)
		}
	}
	if q.countUserSessionsStmt != nil {
		if cerr := q.countUserSessionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUserSessionsStmt: %w", cerr)
		}
	}
	if q.createSessionStmt != nil {
		if cerr := q.createSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSessionStmt: %w", cerr)
		}
	}
	if q.createSourceStmt != nil {
		if cerr := q.createSourceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSourceStmt: %w", cerr)
		}
	}
	if q.createTeamStmt != nil {
		if cerr := q.createTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTeamStmt: %w", cerr)
		}
	}
	if q.createTeamSourceQueryStmt != nil {
		if cerr := q.createTeamSourceQueryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTeamSourceQueryStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteSessionStmt != nil {
		if cerr := q.deleteSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSessionStmt: %w", cerr)
		}
	}
	if q.deleteSourceStmt != nil {
		if cerr := q.deleteSourceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSourceStmt: %w", cerr)
		}
	}
	if q.deleteTeamStmt != nil {
		if cerr := q.deleteTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTeamStmt: %w", cerr)
		}
	}
	if q.deleteTeamSourceQueryStmt != nil {
		if cerr := q.deleteTeamSourceQueryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTeamSourceQueryStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteUserSessionsStmt != nil {
		if cerr := q.deleteUserSessionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserSessionsStmt: %w", cerr)
		}
	}
	if q.getSessionStmt != nil {
		if cerr := q.getSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionStmt: %w", cerr)
		}
	}
	if q.getSourceStmt != nil {
		if cerr := q.getSourceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSourceStmt: %w", cerr)
		}
	}
	if q.getSourceByNameStmt != nil {
		if cerr := q.getSourceByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSourceByNameStmt: %w", cerr)
		}
	}
	if q.getTeamStmt != nil {
		if cerr := q.getTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTeamStmt: %w", cerr)
		}
	}
	if q.getTeamByNameStmt != nil {
		if cerr := q.getTeamByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTeamByNameStmt: %w", cerr)
		}
	}
	if q.getTeamMemberStmt != nil {
		if cerr := q.getTeamMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTeamMemberStmt: %w", cerr)
		}
	}
	if q.getTeamSourceQueryStmt != nil {
		if cerr := q.getTeamSourceQueryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTeamSourceQueryStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.listQueriesByTeamAndSourceStmt != nil {
		if cerr := q.listQueriesByTeamAndSourceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listQueriesByTeamAndSourceStmt: %w", cerr)
		}
	}
	if q.listSourceTeamsStmt != nil {
		if cerr := q.listSourceTeamsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSourceTeamsStmt: %w", cerr)
		}
	}
	if q.listSourcesStmt != nil {
		if cerr := q.listSourcesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSourcesStmt: %w", cerr)
		}
	}
	if q.listSourcesForUserStmt != nil {
		if cerr := q.listSourcesForUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSourcesForUserStmt: %w", cerr)
		}
	}
	if q.listTeamMembersStmt != nil {
		if cerr := q.listTeamMembersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTeamMembersStmt: %w", cerr)
		}
	}
	if q.listTeamMembersWithDetailsStmt != nil {
		if cerr := q.listTeamMembersWithDetailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTeamMembersWithDetailsStmt: %w", cerr)
		}
	}
	if q.listTeamSourcesStmt != nil {
		if cerr := q.listTeamSourcesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTeamSourcesStmt: %w", cerr)
		}
	}
	if q.listTeamsStmt != nil {
		if cerr := q.listTeamsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTeamsStmt: %w", cerr)
		}
	}
	if q.listTeamsForUserStmt != nil {
		if cerr := q.listTeamsForUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTeamsForUserStmt: %w", cerr)
		}
	}
	if q.listUserTeamsStmt != nil {
		if cerr := q.listUserTeamsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserTeamsStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.removeTeamMemberStmt != nil {
		if cerr := q.removeTeamMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeTeamMemberStmt: %w", cerr)
		}
	}
	if q.removeTeamSourceStmt != nil {
		if cerr := q.removeTeamSourceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeTeamSourceStmt: %w", cerr)
		}
	}
	if q.teamHasSourceStmt != nil {
		if cerr := q.teamHasSourceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing teamHasSourceStmt: %w", cerr)
		}
	}
	if q.updateSourceStmt != nil {
		if cerr := q.updateSourceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSourceStmt: %w", cerr)
		}
	}
	if q.updateTeamStmt != nil {
		if cerr := q.updateTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTeamStmt: %w", cerr)
		}
	}
	if q.updateTeamMemberRoleStmt != nil {
		if cerr := q.updateTeamMemberRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTeamMemberRoleStmt: %w", cerr)
		}
	}
	if q.updateTeamSourceQueryStmt != nil {
		if cerr := q.updateTeamSourceQueryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTeamSourceQueryStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.userHasSourceAccessStmt != nil {
		if cerr := q.userHasSourceAccessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userHasSourceAccessStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	addTeamMemberStmt              *sql.Stmt
	addTeamSourceStmt              *sql.Stmt
	countAdminUsersStmt            *sql.Stmt
	countUserSessionsStmt          *sql.Stmt
	createSessionStmt              *sql.Stmt
	createSourceStmt               *sql.Stmt
	createTeamStmt                 *sql.Stmt
	createTeamSourceQueryStmt      *sql.Stmt
	createUserStmt                 *sql.Stmt
	deleteSessionStmt              *sql.Stmt
	deleteSourceStmt               *sql.Stmt
	deleteTeamStmt                 *sql.Stmt
	deleteTeamSourceQueryStmt      *sql.Stmt
	deleteUserStmt                 *sql.Stmt
	deleteUserSessionsStmt         *sql.Stmt
	getSessionStmt                 *sql.Stmt
	getSourceStmt                  *sql.Stmt
	getSourceByNameStmt            *sql.Stmt
	getTeamStmt                    *sql.Stmt
	getTeamByNameStmt              *sql.Stmt
	getTeamMemberStmt              *sql.Stmt
	getTeamSourceQueryStmt         *sql.Stmt
	getUserStmt                    *sql.Stmt
	getUserByEmailStmt             *sql.Stmt
	listQueriesByTeamAndSourceStmt *sql.Stmt
	listSourceTeamsStmt            *sql.Stmt
	listSourcesStmt                *sql.Stmt
	listSourcesForUserStmt         *sql.Stmt
	listTeamMembersStmt            *sql.Stmt
	listTeamMembersWithDetailsStmt *sql.Stmt
	listTeamSourcesStmt            *sql.Stmt
	listTeamsStmt                  *sql.Stmt
	listTeamsForUserStmt           *sql.Stmt
	listUserTeamsStmt              *sql.Stmt
	listUsersStmt                  *sql.Stmt
	removeTeamMemberStmt           *sql.Stmt
	removeTeamSourceStmt           *sql.Stmt
	teamHasSourceStmt              *sql.Stmt
	updateSourceStmt               *sql.Stmt
	updateTeamStmt                 *sql.Stmt
	updateTeamMemberRoleStmt       *sql.Stmt
	updateTeamSourceQueryStmt      *sql.Stmt
	updateUserStmt                 *sql.Stmt
	userHasSourceAccessStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		addTeamMemberStmt:              q.addTeamMemberStmt,
		addTeamSourceStmt:              q.addTeamSourceStmt,
		countAdminUsersStmt:            q.countAdminUsersStmt,
		countUserSessionsStmt:          q.countUserSessionsStmt,
		createSessionStmt:              q.createSessionStmt,
		createSourceStmt:               q.createSourceStmt,
		createTeamStmt:                 q.createTeamStmt,
		createTeamSourceQueryStmt:      q.createTeamSourceQueryStmt,
		createUserStmt:                 q.createUserStmt,
		deleteSessionStmt:              q.deleteSessionStmt,
		deleteSourceStmt:               q.deleteSourceStmt,
		deleteTeamStmt:                 q.deleteTeamStmt,
		deleteTeamSourceQueryStmt:      q.deleteTeamSourceQueryStmt,
		deleteUserStmt:                 q.deleteUserStmt,
		deleteUserSessionsStmt:         q.deleteUserSessionsStmt,
		getSessionStmt:                 q.getSessionStmt,
		getSourceStmt:                  q.getSourceStmt,
		getSourceByNameStmt:            q.getSourceByNameStmt,
		getTeamStmt:                    q.getTeamStmt,
		getTeamByNameStmt:              q.getTeamByNameStmt,
		getTeamMemberStmt:              q.getTeamMemberStmt,
		getTeamSourceQueryStmt:         q.getTeamSourceQueryStmt,
		getUserStmt:                    q.getUserStmt,
		getUserByEmailStmt:             q.getUserByEmailStmt,
		listQueriesByTeamAndSourceStmt: q.listQueriesByTeamAndSourceStmt,
		listSourceTeamsStmt:            q.listSourceTeamsStmt,
		listSourcesStmt:                q.listSourcesStmt,
		listSourcesForUserStmt:         q.listSourcesForUserStmt,
		listTeamMembersStmt:            q.listTeamMembersStmt,
		listTeamMembersWithDetailsStmt: q.listTeamMembersWithDetailsStmt,
		listTeamSourcesStmt:            q.listTeamSourcesStmt,
		listTeamsStmt:                  q.listTeamsStmt,
		listTeamsForUserStmt:           q.listTeamsForUserStmt,
		listUserTeamsStmt:              q.listUserTeamsStmt,
		listUsersStmt:                  q.listUsersStmt,
		removeTeamMemberStmt:           q.removeTeamMemberStmt,
		removeTeamSourceStmt:           q.removeTeamSourceStmt,
		teamHasSourceStmt:              q.teamHasSourceStmt,
		updateSourceStmt:               q.updateSourceStmt,
		updateTeamStmt:                 q.updateTeamStmt,
		updateTeamMemberRoleStmt:       q.updateTeamMemberRoleStmt,
		updateTeamSourceQueryStmt:      q.updateTeamSourceQueryStmt,
		updateUserStmt:                 q.updateUserStmt,
		userHasSourceAccessStmt:        q.userHasSourceAccessStmt,
	}
}
