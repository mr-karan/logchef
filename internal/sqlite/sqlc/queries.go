// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const addTeamMember = `-- name: AddTeamMember :exec
-- Add a member to a team
INSERT INTO team_members (team_id, user_id, role)
VALUES (?, ?, ?)
`

type AddTeamMemberParams struct {
	TeamID int64  `json:"team_id"`
	UserID int64  `json:"user_id"`
	Role   string `json:"role"`
}

func (q *Queries) AddTeamMember(ctx context.Context, arg AddTeamMemberParams) error {
	_, err := q.db.ExecContext(ctx, addTeamMember, arg.TeamID, arg.UserID, arg.Role)
	return err
}

const addTeamSource = `-- name: AddTeamSource :exec
-- Add a data source to a team
INSERT INTO team_sources (team_id, source_id)
VALUES (?, ?)
`

type AddTeamSourceParams struct {
	TeamID   int64 `json:"team_id"`
	SourceID int64 `json:"source_id"`
}

func (q *Queries) AddTeamSource(ctx context.Context, arg AddTeamSourceParams) error {
	_, err := q.db.ExecContext(ctx, addTeamSource, arg.TeamID, arg.SourceID)
	return err
}

const countAdminUsers = `-- name: CountAdminUsers :one
-- Count active admin users
SELECT COUNT(*) FROM users WHERE role = ? AND status = ?
`

type CountAdminUsersParams struct {
	Role   string `json:"role"`
	Status string `json:"status"`
}

func (q *Queries) CountAdminUsers(ctx context.Context, arg CountAdminUsersParams) (int64, error) {
	var count int64
	err := q.db.QueryRowContext(ctx, countAdminUsers, arg.Role, arg.Status).Scan(&count)
	return count, err
}

const countUserSessions = `-- name: CountUserSessions :one
-- Count active sessions for a user
SELECT COUNT(*) FROM sessions WHERE user_id = ? AND expires_at > ?
`

type CountUserSessionsParams struct {
	UserID      int64     `json:"user_id"`
	CurrentTime time.Time `json:"current_time"`
}

func (q *Queries) CountUserSessions(ctx context.Context, arg CountUserSessionsParams) (int64, error) {
	var count int64
	err := q.db.QueryRowContext(ctx, countUserSessions, arg.UserID, arg.CurrentTime).Scan(&count)
	return count, err
}

const createSession = `-- name: CreateSession :exec
-- Create a new session
INSERT INTO sessions (id, user_id, expires_at, created_at)
VALUES (?, ?, ?, ?)
`

type CreateSessionParams struct {
	ID        string    `json:"id"`
	UserID    int64     `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession, arg.ID, arg.UserID, arg.ExpiresAt, arg.CreatedAt)
	return err
}

const createSource = `-- name: CreateSource :one
-- Create a new source entry
INSERT INTO sources (
    name, _meta_is_auto_created, _meta_ts_field, _meta_severity_field, host, username, password, database, table_name, description, ttl_days, created_at, updated_at
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))
RETURNING id
`

type CreateSourceParams struct {
	Name              string         `json:"name"`
	MetaIsAutoCreated int64          `json:"_meta_is_auto_created"`
	MetaTSField       string         `json:"_meta_ts_field"`
	MetaSeverityField sql.NullString `json:"_meta_severity_field"`
	Host              string         `json:"host"`
	Username          string         `json:"username"`
	Password          string         `json:"password"`
	Database          string         `json:"database"`
	TableName         string         `json:"table_name"`
	Description       sql.NullString `json:"description"`
	TtlDays           int64          `json:"ttl_days"`
}

func (q *Queries) CreateSource(ctx context.Context, arg CreateSourceParams) (int64, error) {
	var id int64
	err := q.db.QueryRowContext(ctx, createSource,
		arg.Name,
		arg.MetaIsAutoCreated,
		arg.MetaTSField,
		arg.MetaSeverityField,
		arg.Host,
		arg.Username,
		arg.Password,
		arg.Database,
		arg.TableName,
		arg.Description,
		arg.TtlDays,
	).Scan(&id)
	return id, err
}

const createTeam = `-- name: CreateTeam :one
-- Create a new team
INSERT INTO teams (name, description)
VALUES (?, ?)
RETURNING id
`

type CreateTeamParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (int64, error) {
	var id int64
	err := q.db.QueryRowContext(ctx, createTeam, arg.Name, arg.Description).Scan(&id)
	return id, err
}

const createTeamQuery = `-- name: CreateTeamQuery :one
-- Create a new query for a team
INSERT INTO team_queries (team_id, source_id, name, description, query_type, query_content)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id
`

type CreateTeamQueryParams struct {
	TeamID       int64          `json:"team_id"`
	SourceID     int64          `json:"source_id"`
	Name         string         `json:"name"`
	Description  sql.NullString `json:"description"`
	QueryType    string         `json:"query_type"`
	QueryContent string         `json:"query_content"`
}

func (q *Queries) CreateTeamQuery(ctx context.Context, arg CreateTeamQueryParams) (int64, error) {
	var id int64
	err := q.db.QueryRowContext(ctx, createTeamQuery,
		arg.TeamID,
		arg.SourceID,
		arg.Name,
		arg.Description,
		arg.QueryType,
		arg.QueryContent,
	).Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
-- Create a new user
INSERT INTO users (email, full_name, role, status, last_login_at)
VALUES (?, ?, ?, ?, ?)
RETURNING id
`

type CreateUserParams struct {
	Email       string       `json:"email"`
	FullName    string       `json:"full_name"`
	Role        string       `json:"role"`
	Status      string       `json:"status"`
	LastLoginAt sql.NullTime `json:"last_login_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	var id int64
	err := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.FullName,
		arg.Role,
		arg.Status,
		arg.LastLoginAt,
	).Scan(&id)
	return id, err
}

const deleteSession = `-- name: DeleteSession :exec
-- Delete a session by ID
DELETE FROM sessions WHERE id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const deleteSource = `-- name: DeleteSource :exec
-- Delete a source by ID
DELETE FROM sources WHERE id = ?
`

func (q *Queries) DeleteSource(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSource, id)
	return err
}

const deleteTeam = `-- name: DeleteTeam :exec
-- Delete a team by ID
DELETE FROM teams WHERE id = ?
`

func (q *Queries) DeleteTeam(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeam, id)
	return err
}

const deleteTeamQuery = `-- name: DeleteTeamQuery :exec
-- Delete a query by ID
DELETE FROM team_queries WHERE id = ?
`

func (q *Queries) DeleteTeamQuery(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeamQuery, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
-- Delete a user by ID
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const deleteUserSessions = `-- name: DeleteUserSessions :exec
-- Delete all sessions for a user
DELETE FROM sessions WHERE user_id = ?
`

func (q *Queries) DeleteUserSessions(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserSessions, userID)
	return err
}

const getSession = `-- name: GetSession :one
-- Get a session by ID
SELECT id, user_id, expires_at, created_at FROM sessions WHERE id = ?
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	var i Session
	err := q.db.QueryRowContext(ctx, getSession, id).Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSource = `-- name: GetSource :one
-- Get a single source by ID
SELECT id, name, _meta_is_auto_created, _meta_ts_field, _meta_severity_field, host, username, password, database, table_name, description, ttl_days, created_at, updated_at FROM sources WHERE id = ?
`

func (q *Queries) GetSource(ctx context.Context, id int64) (Source, error) {
	var i Source
	err := q.db.QueryRowContext(ctx, getSource, id).Scan(
		&i.ID,
		&i.Name,
		&i.MetaIsAutoCreated,
		&i.MetaTSField,
		&i.MetaSeverityField,
		&i.Host,
		&i.Username,
		&i.Password,
		&i.Database,
		&i.TableName,
		&i.Description,
		&i.TtlDays,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSourceByName = `-- name: GetSourceByName :one
-- Get a single source by table name and database
SELECT id, name, _meta_is_auto_created, _meta_ts_field, _meta_severity_field, host, username, password, database, table_name, description, ttl_days, created_at, updated_at FROM sources WHERE database = ? AND table_name = ?
`

type GetSourceByNameParams struct {
	Database  string `json:"database"`
	TableName string `json:"table_name"`
}

func (q *Queries) GetSourceByName(ctx context.Context, arg GetSourceByNameParams) (Source, error) {
	var i Source
	err := q.db.QueryRowContext(ctx, getSourceByName, arg.Database, arg.TableName).Scan(
		&i.ID,
		&i.Name,
		&i.MetaIsAutoCreated,
		&i.MetaTSField,
		&i.MetaSeverityField,
		&i.Host,
		&i.Username,
		&i.Password,
		&i.Database,
		&i.TableName,
		&i.Description,
		&i.TtlDays,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeam = `-- name: GetTeam :one
-- Get a team by ID
SELECT id, name, description, created_at, updated_at FROM teams WHERE id = ?
`

func (q *Queries) GetTeam(ctx context.Context, id int64) (Team, error) {
	var i Team
	err := q.db.QueryRowContext(ctx, getTeam, id).Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamByName = `-- name: GetTeamByName :one
-- Get a team by its name
SELECT id, name, description, created_at, updated_at FROM teams WHERE name = ?
`

func (q *Queries) GetTeamByName(ctx context.Context, name string) (Team, error) {
	var i Team
	err := q.db.QueryRowContext(ctx, getTeamByName, name).Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamMember = `-- name: GetTeamMember :one
-- Get a team member
SELECT team_id, user_id, role, created_at FROM team_members WHERE team_id = ? AND user_id = ?
`

type GetTeamMemberParams struct {
	TeamID int64 `json:"team_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetTeamMember(ctx context.Context, arg GetTeamMemberParams) (TeamMember, error) {
	var i TeamMember
	err := q.db.QueryRowContext(ctx, getTeamMember, arg.TeamID, arg.UserID).Scan(
		&i.TeamID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getTeamQuery = `-- name: GetTeamQuery :one
-- Get a query by ID
SELECT id, team_id, source_id, name, description, query_type, query_content, created_at, updated_at FROM team_queries WHERE id = ?
`

func (q *Queries) GetTeamQuery(ctx context.Context, id int64) (TeamQuery, error) {
	var i TeamQuery
	err := q.db.QueryRowContext(ctx, getTeamQuery, id).Scan(
		&i.ID,
		&i.TeamID,
		&i.SourceID,
		&i.Name,
		&i.Description,
		&i.QueryType,
		&i.QueryContent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamQueryWithAccess = `-- name: GetTeamQueryWithAccess :one
-- Get a team query by ID and check if the user has access to it
SELECT tq.id, tq.team_id, tq.source_id, tq.name, tq.description, tq.query_type, tq.query_content, tq.created_at, tq.updated_at FROM team_queries tq
JOIN team_members tm ON tq.team_id = tm.team_id
WHERE tq.id = ? AND tm.user_id = ?
`

type GetTeamQueryWithAccessParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetTeamQueryWithAccess(ctx context.Context, arg GetTeamQueryWithAccessParams) (TeamQuery, error) {
	var i TeamQuery
	err := q.db.QueryRowContext(ctx, getTeamQueryWithAccess, arg.ID, arg.UserID).Scan(
		&i.ID,
		&i.TeamID,
		&i.SourceID,
		&i.Name,
		&i.Description,
		&i.QueryType,
		&i.QueryContent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
-- Get a user by ID
SELECT id, email, full_name, role, status, last_login_at, last_active_at, created_at, updated_at FROM users WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	var i User
	err := q.db.QueryRowContext(ctx, getUser, id).Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Role,
		&i.Status,
		&i.LastLoginAt,
		&i.LastActiveAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
-- Get a user by email
SELECT id, email, full_name, role, status, last_login_at, last_active_at, created_at, updated_at FROM users WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	var i User
	err := q.db.QueryRowContext(ctx, getUserByEmail, email).Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Role,
		&i.Status,
		&i.LastLoginAt,
		&i.LastActiveAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listQueriesBySource = `-- name: ListQueriesBySource :many
-- List all queries for a specific source
SELECT id, team_id, source_id, name, description, query_type, query_content, created_at, updated_at FROM team_queries WHERE source_id = ? ORDER BY created_at DESC
`

func (q *Queries) ListQueriesBySource(ctx context.Context, sourceID int64) ([]TeamQuery, error) {
	rows, err := q.db.QueryContext(ctx, listQueriesBySource, sourceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamQuery
	for rows.Next() {
		var i TeamQuery
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.SourceID,
			&i.Name,
			&i.Description,
			&i.QueryType,
			&i.QueryContent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQueriesByTeamAndSource = `-- name: ListQueriesByTeamAndSource :many
-- List all queries for a specific team and source
SELECT id, team_id, source_id, name, description, query_type, query_content, created_at, updated_at FROM team_queries WHERE team_id = ? AND source_id = ? ORDER BY created_at DESC
`

type ListQueriesByTeamAndSourceParams struct {
	TeamID   int64 `json:"team_id"`
	SourceID int64 `json:"source_id"`
}

func (q *Queries) ListQueriesByTeamAndSource(ctx context.Context, arg ListQueriesByTeamAndSourceParams) ([]TeamQuery, error) {
	rows, err := q.db.QueryContext(ctx, listQueriesByTeamAndSource, arg.TeamID, arg.SourceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamQuery
	for rows.Next() {
		var i TeamQuery
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.SourceID,
			&i.Name,
			&i.Description,
			&i.QueryType,
			&i.QueryContent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQueriesForUser = `-- name: ListQueriesForUser :many
-- List all queries that a user has access to across all their teams
SELECT tq.id, tq.team_id, tq.source_id, tq.name, tq.description, tq.query_type, tq.query_content, tq.created_at, tq.updated_at FROM team_queries tq
JOIN team_members tm ON tq.team_id = tm.team_id
WHERE tm.user_id = ?
ORDER BY tq.created_at DESC
`

func (q *Queries) ListQueriesForUser(ctx context.Context, userID int64) ([]TeamQuery, error) {
	rows, err := q.db.QueryContext(ctx, listQueriesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamQuery
	for rows.Next() {
		var i TeamQuery
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.SourceID,
			&i.Name,
			&i.Description,
			&i.QueryType,
			&i.QueryContent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQueriesForUserAndTeam = `-- name: ListQueriesForUserAndTeam :many
-- List all queries for a specific team that a user has access to
SELECT tq.id, tq.team_id, tq.source_id, tq.name, tq.description, tq.query_type, tq.query_content, tq.created_at, tq.updated_at FROM team_queries tq
JOIN team_members tm ON tq.team_id = tm.team_id
WHERE tq.team_id = ? AND tm.user_id = ?
ORDER BY tq.created_at DESC
`

type ListQueriesForUserAndTeamParams struct {
	TeamID int64 `json:"team_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) ListQueriesForUserAndTeam(ctx context.Context, arg ListQueriesForUserAndTeamParams) ([]TeamQuery, error) {
	rows, err := q.db.QueryContext(ctx, listQueriesForUserAndTeam, arg.TeamID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamQuery
	for rows.Next() {
		var i TeamQuery
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.SourceID,
			&i.Name,
			&i.Description,
			&i.QueryType,
			&i.QueryContent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQueriesForUserBySource = `-- name: ListQueriesForUserBySource :many
-- List all queries for a specific source that a user has access to
SELECT tq.id, tq.team_id, tq.source_id, tq.name, tq.description, tq.query_type, tq.query_content, tq.created_at, tq.updated_at FROM team_queries tq
JOIN team_members tm ON tq.team_id = tm.team_id
WHERE tm.user_id = ? AND tq.source_id = ?
ORDER BY tq.created_at DESC
`

type ListQueriesForUserBySourceParams struct {
	UserID   int64 `json:"user_id"`
	SourceID int64 `json:"source_id"`
}

func (q *Queries) ListQueriesForUserBySource(ctx context.Context, arg ListQueriesForUserBySourceParams) ([]TeamQuery, error) {
	rows, err := q.db.QueryContext(ctx, listQueriesForUserBySource, arg.UserID, arg.SourceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamQuery
	for rows.Next() {
		var i TeamQuery
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.SourceID,
			&i.Name,
			&i.Description,
			&i.QueryType,
			&i.QueryContent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSources = `-- name: ListSources :many
-- Get all sources ordered by creation date
SELECT id, name, _meta_is_auto_created, _meta_ts_field, _meta_severity_field, host, username, password, database, table_name, description, ttl_days, created_at, updated_at FROM sources ORDER BY created_at DESC
`

func (q *Queries) ListSources(ctx context.Context) ([]Source, error) {
	rows, err := q.db.QueryContext(ctx, listSources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Source
	for rows.Next() {
		var i Source
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MetaIsAutoCreated,
			&i.MetaTSField,
			&i.MetaSeverityField,
			&i.Host,
			&i.Username,
			&i.Password,
			&i.Database,
			&i.TableName,
			&i.Description,
			&i.TtlDays,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSourcesForUser = `-- name: ListSourcesForUser :many
-- List all sources a user has access to
SELECT DISTINCT s.id, s.name, s._meta_is_auto_created, s._meta_ts_field, s._meta_severity_field, s.host, s.username, s.password, s.database, s.table_name, s.description, s.ttl_days, s.created_at, s.updated_at FROM sources s
JOIN team_sources ts ON s.id = ts.source_id
JOIN team_members tm ON ts.team_id = tm.team_id
WHERE tm.user_id = ?
ORDER BY s.created_at DESC
`

func (q *Queries) ListSourcesForUser(ctx context.Context, userID int64) ([]Source, error) {
	rows, err := q.db.QueryContext(ctx, listSourcesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Source
	for rows.Next() {
		var i Source
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MetaIsAutoCreated,
			&i.MetaTSField,
			&i.MetaSeverityField,
			&i.Host,
			&i.Username,
			&i.Password,
			&i.Database,
			&i.TableName,
			&i.Description,
			&i.TtlDays,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSourceTeams = `-- name: ListSourceTeams :many
-- List all teams a data source is a member of
SELECT t.id, t.name, t.description, t.created_at, t.updated_at
FROM teams t
JOIN team_sources ts ON t.id = ts.team_id
WHERE ts.source_id = ?
ORDER BY t.name
`

func (q *Queries) ListSourceTeams(ctx context.Context, sourceID int64) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, listSourceTeams, sourceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamMembers = `-- name: ListTeamMembers :many
-- List all members of a team
SELECT tm.team_id, tm.user_id, tm.role, tm.created_at
FROM team_members tm
WHERE tm.team_id = ?
ORDER BY tm.created_at
`

func (q *Queries) ListTeamMembers(ctx context.Context, teamID int64) ([]TeamMember, error) {
	rows, err := q.db.QueryContext(ctx, listTeamMembers, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamMember
	for rows.Next() {
		var i TeamMember
		if err := rows.Scan(
			&i.TeamID,
			&i.UserID,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamMembersWithDetails = `-- name: ListTeamMembersWithDetails :many
-- List all members of a team with user details
SELECT tm.team_id, tm.user_id, tm.role, tm.created_at, u.email, u.full_name
FROM team_members tm
JOIN users u ON tm.user_id = u.id
WHERE tm.team_id = ?
ORDER BY tm.created_at ASC
`

func (q *Queries) ListTeamMembersWithDetails(ctx context.Context, teamID int64) ([]TeamMember, error) {
	rows, err := q.db.QueryContext(ctx, listTeamMembersWithDetails, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamMember
	for rows.Next() {
		var i TeamMember
		if err := rows.Scan(
			&i.TeamID,
			&i.UserID,
			&i.Role,
			&i.CreatedAt,
			&i.Email,
			&i.FullName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamQueries = `-- name: ListTeamQueries :many
-- List all queries in a team
SELECT id, team_id, source_id, name, description, query_type, query_content, created_at, updated_at FROM team_queries WHERE team_id = ? ORDER BY created_at DESC
`

func (q *Queries) ListTeamQueries(ctx context.Context, teamID int64) ([]TeamQuery, error) {
	rows, err := q.db.QueryContext(ctx, listTeamQueries, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamQuery
	for rows.Next() {
		var i TeamQuery
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.SourceID,
			&i.Name,
			&i.Description,
			&i.QueryType,
			&i.QueryContent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeams = `-- name: ListTeams :many
-- List all teams
SELECT id, name, description, created_at, updated_at FROM teams ORDER BY created_at DESC
`

func (q *Queries) ListTeams(ctx context.Context) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, listTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamsForUser = `-- name: ListTeamsForUser :many
-- List all teams a user is a member of
SELECT t.id, t.name, t.description, t.created_at, t.updated_at FROM teams t
JOIN team_members tm ON t.id = tm.team_id
WHERE tm.user_id = ?
ORDER BY t.created_at DESC
`

func (q *Queries) ListTeamsForUser(ctx context.Context, userID int64) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, listTeamsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamSources = `-- name: ListTeamSources :many
-- List all data sources in a team
SELECT s.id, s.name, s.database, s.table_name, s.description, s.created_at
FROM sources s
JOIN team_sources ts ON s.id = ts.source_id
WHERE ts.team_id = ?
ORDER BY s.created_at DESC
`

type ListTeamSourcesRow struct {
	ID          int64          `json:"id"`
	Name        string         `json:"name"`
	Database    string         `json:"database"`
	TableName   string         `json:"table_name"`
	Description sql.NullString `json:"description"`
	CreatedAt   time.Time      `json:"created_at"`
}

func (q *Queries) ListTeamSources(ctx context.Context, teamID int64) ([]ListTeamSourcesRow, error) {
	rows, err := q.db.QueryContext(ctx, listTeamSources, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTeamSourcesRow
	for rows.Next() {
		var i ListTeamSourcesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Database,
			&i.TableName,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserTeams = `-- name: ListUserTeams :many
-- List all teams a user is a member of
SELECT t.*
FROM teams t
JOIN team_members tm ON t.id = tm.team_id
WHERE tm.user_id = ?
ORDER BY t.name
`

func (q *Queries) ListUserTeams(ctx context.Context, userID int64) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, listUserTeams, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
-- List all users
SELECT id, email, full_name, role, status, last_login_at, last_active_at, created_at, updated_at FROM users ORDER BY created_at ASC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FullName,
			&i.Role,
			&i.Status,
			&i.LastLoginAt,
			&i.LastActiveAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTeamMember = `-- name: RemoveTeamMember :exec
-- Remove a member from a team
DELETE FROM team_members
WHERE team_id = ? AND user_id = ?
`

type RemoveTeamMemberParams struct {
	TeamID int64 `json:"team_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) RemoveTeamMember(ctx context.Context, arg RemoveTeamMemberParams) error {
	_, err := q.db.ExecContext(ctx, removeTeamMember, arg.TeamID, arg.UserID)
	return err
}

const removeTeamSource = `-- name: RemoveTeamSource :exec
-- Remove a data source from a team
DELETE FROM team_sources WHERE team_id = ? AND source_id = ?
`

type RemoveTeamSourceParams struct {
	TeamID   int64 `json:"team_id"`
	SourceID int64 `json:"source_id"`
}

func (q *Queries) RemoveTeamSource(ctx context.Context, arg RemoveTeamSourceParams) error {
	_, err := q.db.ExecContext(ctx, removeTeamSource, arg.TeamID, arg.SourceID)
	return err
}

const teamHasSource = `-- name: TeamHasSource :one
-- Check if a team has access to a source
SELECT COUNT(*) FROM team_sources
WHERE team_id = ? AND source_id = ?
`

type TeamHasSourceParams struct {
	TeamID   int64 `json:"team_id"`
	SourceID int64 `json:"source_id"`
}

func (q *Queries) TeamHasSource(ctx context.Context, arg TeamHasSourceParams) (int64, error) {
	var count int64
	err := q.db.QueryRowContext(ctx, teamHasSource, arg.TeamID, arg.SourceID).Scan(&count)
	return count, err
}

const updateSource = `-- name: UpdateSource :exec
-- Update an existing source
UPDATE sources
SET name = ?,
    _meta_is_auto_created = ?,
    _meta_ts_field = ?,
    _meta_severity_field = ?,
    host = ?,
    username = ?,
    password = ?,
    database = ?,
    table_name = ?,
    description = ?,
    ttl_days = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateSourceParams struct {
	Name              string         `json:"name"`
	MetaIsAutoCreated int64          `json:"_meta_is_auto_created"`
	MetaTSField       string         `json:"_meta_ts_field"`
	MetaSeverityField sql.NullString `json:"_meta_severity_field"`
	Host              string         `json:"host"`
	Username          string         `json:"username"`
	Password          string         `json:"password"`
	Database          string         `json:"database"`
	TableName         string         `json:"table_name"`
	Description       sql.NullString `json:"description"`
	TtlDays           int64          `json:"ttl_days"`
	ID                int64          `json:"id"`
}

func (q *Queries) UpdateSource(ctx context.Context, arg UpdateSourceParams) error {
	_, err := q.db.ExecContext(ctx, updateSource,
		arg.Name,
		arg.MetaIsAutoCreated,
		arg.MetaTSField,
		arg.MetaSeverityField,
		arg.Host,
		arg.Username,
		arg.Password,
		arg.Database,
		arg.TableName,
		arg.Description,
		arg.TtlDays,
		arg.ID,
	)
	return err
}

const updateTeam = `-- name: UpdateTeam :exec
-- Update a team
UPDATE teams
SET name = ?,
    description = ?,
    updated_at = ?
WHERE id = ?
`

type UpdateTeamParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	UpdatedAt   time.Time      `json:"updated_at"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) error {
	_, err := q.db.ExecContext(ctx, updateTeam, arg.Name, arg.Description, arg.UpdatedAt, arg.ID)
	return err
}

const updateTeamMemberRole = `-- name: UpdateTeamMemberRole :exec
-- Update a team member's role
UPDATE team_members
SET role = ?
WHERE team_id = ? AND user_id = ?
`

type UpdateTeamMemberRoleParams struct {
	Role   string `json:"role"`
	TeamID int64  `json:"team_id"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) UpdateTeamMemberRole(ctx context.Context, arg UpdateTeamMemberRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateTeamMemberRole, arg.Role, arg.TeamID, arg.UserID)
	return err
}

const updateTeamQuery = `-- name: UpdateTeamQuery :exec
-- Update a query for a team
UPDATE team_queries
SET name = ?,
    description = ?,
    source_id = ?,
    query_type = ?,
    query_content = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateTeamQueryParams struct {
	Name         string         `json:"name"`
	Description  sql.NullString `json:"description"`
	SourceID     int64          `json:"source_id"`
	QueryType    string         `json:"query_type"`
	QueryContent string         `json:"query_content"`
	ID           int64          `json:"id"`
}

func (q *Queries) UpdateTeamQuery(ctx context.Context, arg UpdateTeamQueryParams) error {
	_, err := q.db.ExecContext(ctx, updateTeamQuery,
		arg.Name,
		arg.Description,
		arg.SourceID,
		arg.QueryType,
		arg.QueryContent,
		arg.ID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
-- Update a user
UPDATE users
SET email = ?,
    full_name = ?,
    role = ?,
    status = ?,
    last_login_at = ?,
    last_active_at = ?,
    updated_at = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Email       string       `json:"email"`
	FullName    string       `json:"full_name"`
	Role        string       `json:"role"`
	Status      string       `json:"status"`
	LastLoginAt sql.NullTime `json:"last_login_at"`
	LastActiveAt sql.NullTime `json:"last_active_at"`
	UpdatedAt   time.Time    `json:"updated_at"`
	ID          int64        `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Email,
		arg.FullName,
		arg.Role,
		arg.Status,
		arg.LastLoginAt,
		arg.LastActiveAt,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const userHasSourceAccess = `-- name: UserHasSourceAccess :one
-- Check if a user has access to a source through any team
SELECT COUNT(*) FROM team_members tm
JOIN team_sources ts ON tm.team_id = ts.team_id
WHERE tm.user_id = ? AND ts.source_id = ?
`

type UserHasSourceAccessParams struct {
	UserID   int64 `json:"user_id"`
	SourceID int64 `json:"source_id"`
}

func (q *Queries) UserHasSourceAccess(ctx context.Context, arg UserHasSourceAccessParams) (int64, error) {
	var count int64
	err := q.db.QueryRowContext(ctx, userHasSourceAccess, arg.UserID, arg.SourceID).Scan(&count)
	return count, err
}
