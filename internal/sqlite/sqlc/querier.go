// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"context"
)

type Querier interface {
	// Team Members
	// Add a member to a team
	AddTeamMember(ctx context.Context, arg AddTeamMemberParams) error
	// Team Sources
	// Add a data source to a team
	AddTeamSource(ctx context.Context, arg AddTeamSourceParams) error
	// Count active admin users
	CountAdminUsers(ctx context.Context, arg CountAdminUsersParams) (int64, error)
	// Count active sessions for a user
	CountUserSessions(ctx context.Context, arg CountUserSessionsParams) (int64, error)
	// Sessions
	// Create a new session
	CreateSession(ctx context.Context, arg CreateSessionParams) error
	// Sources
	// Create a new source entry
	CreateSource(ctx context.Context, arg CreateSourceParams) (int64, error)
	// Teams
	// Create a new team
	CreateTeam(ctx context.Context, arg CreateTeamParams) (int64, error)
	// Team Queries
	// Create a new query for a team and source
	CreateTeamSourceQuery(ctx context.Context, arg CreateTeamSourceQueryParams) (int64, error)
	// Users
	// Create a new user
	CreateUser(ctx context.Context, arg CreateUserParams) (int64, error)
	// Delete a session by ID
	DeleteSession(ctx context.Context, id string) error
	// Delete a source by ID
	DeleteSource(ctx context.Context, id int64) error
	// Delete a team by ID
	DeleteTeam(ctx context.Context, id int64) error
	// Delete a query by ID for a specific team and source
	DeleteTeamSourceQuery(ctx context.Context, arg DeleteTeamSourceQueryParams) error
	// Delete a user by ID
	DeleteUser(ctx context.Context, id int64) error
	// Delete all sessions for a user
	DeleteUserSessions(ctx context.Context, userID int64) error
	// Get a session by ID
	GetSession(ctx context.Context, id string) (Session, error)
	// Get a single source by ID
	GetSource(ctx context.Context, id int64) (Source, error)
	// Get a single source by table name and database
	GetSourceByName(ctx context.Context, arg GetSourceByNameParams) (Source, error)
	// Get a team by ID
	GetTeam(ctx context.Context, id int64) (Team, error)
	// Get a team by its name
	GetTeamByName(ctx context.Context, name string) (Team, error)
	// Get a team member
	GetTeamMember(ctx context.Context, arg GetTeamMemberParams) (TeamMember, error)
	// Get a query by ID for a specific team and source
	GetTeamSourceQuery(ctx context.Context, arg GetTeamSourceQueryParams) (TeamQuery, error)
	// Get a user by ID
	GetUser(ctx context.Context, id int64) (User, error)
	// Get a user by email
	GetUserByEmail(ctx context.Context, email string) (User, error)
	// List all queries for a specific team and source
	ListQueriesByTeamAndSource(ctx context.Context, arg ListQueriesByTeamAndSourceParams) ([]TeamQuery, error)
	// List all teams a data source is a member of
	ListSourceTeams(ctx context.Context, sourceID int64) ([]Team, error)
	// Get all sources ordered by creation date
	ListSources(ctx context.Context) ([]Source, error)
	// List all sources a user has access to
	ListSourcesForUser(ctx context.Context, userID int64) ([]Source, error)
	// List all members of a team
	ListTeamMembers(ctx context.Context, teamID int64) ([]TeamMember, error)
	// List all members of a team with user details
	ListTeamMembersWithDetails(ctx context.Context, teamID int64) ([]ListTeamMembersWithDetailsRow, error)
	// List all data sources in a team
	ListTeamSources(ctx context.Context, teamID int64) ([]Source, error)
	// List all teams
	ListTeams(ctx context.Context) ([]ListTeamsRow, error)
	// List all teams a user is a member of
	ListTeamsForUser(ctx context.Context, userID int64) ([]Team, error)
	// List all teams a user is a member of
	ListUserTeams(ctx context.Context, userID int64) ([]Team, error)
	// List all users
	ListUsers(ctx context.Context) ([]User, error)
	// Remove a member from a team
	RemoveTeamMember(ctx context.Context, arg RemoveTeamMemberParams) error
	// Remove a data source from a team
	RemoveTeamSource(ctx context.Context, arg RemoveTeamSourceParams) error
	// Additional queries for user-source and team-source access
	// Check if a team has access to a source
	TeamHasSource(ctx context.Context, arg TeamHasSourceParams) (int64, error)
	// Update an existing source
	UpdateSource(ctx context.Context, arg UpdateSourceParams) error
	// Update a team
	UpdateTeam(ctx context.Context, arg UpdateTeamParams) error
	// Update a team member's role
	UpdateTeamMemberRole(ctx context.Context, arg UpdateTeamMemberRoleParams) error
	// Update a query for a team and source
	UpdateTeamSourceQuery(ctx context.Context, arg UpdateTeamSourceQueryParams) error
	// Update a user
	UpdateUser(ctx context.Context, arg UpdateUserParams) error
	// Check if a user has access to a source through any team
	UserHasSourceAccess(ctx context.Context, arg UserHasSourceAccessParams) (int64, error)
}

var _ Querier = (*Queries)(nil)
